https://www.w3schools.com/js/js_statements.asp
https://www.w3schools.com/js/js_syntax.asp
...
http://javascript.info/


////////////////
// Statements //
////////////////

all instructions like z = x + y; are called Statments.
JavaScript statements are composed of Values, Operators, Expressions, Keywords and Comments.
Semicolons separate JavaScript statements.

//////////////////////////////


Code Blocks {}

if (condition) {
    code block;
} else {
    code block;
} // (no semicolon)

//////////////////////////////

Keywords

JavaScript statements often start with a keyword to identify the JavaScript action to be performed.

Some keywords:

break, continue, debugger, do ... while, for, function, if ... else, return, switch,
try ... catch,
var, const, let (they are used to tell the browser to create variables.)

//////////////////////////////

Values

The JavaScript syntax defines two types of values: Fixed values and variable values.
Fixed values are called literals. variable values are called variables.

Literals (?): 10.634, 5, "String", 'String', true/false, null, undefined, NaN, Infinity, -Infinity

null is the same as None (empty, nothing) in Python. 
NaN represents a computional error. E. g. "string" / 2

//////////////////////////////

Variables

JavaScript uses several keywords to declare variables:

var, const, let

const varName = ... ;

You can declare many variables in one statement. Separate by comma.
var person = "Me", price = 9.99, currency = "€";


///////////////
// Operators //
///////////////

Arithmetic operators:
+, -, *, /

% (Modulus, Division Remainder)
** Exponentiation			// 2 ** 3 = 8; 4 ** (1/2) = 2 (square root); 8 ** (1/3) = 2 (cubic root)
++ (Increment), -- (Decrement)		// number = 3; number-- // returns 2
					// Increment and Decrement can be applied only to a variable!
					// There is a difference between prefix (--number) and postfix form.
an unary operator has one operand,
x = -1; x = -x;			// x is now 1
a binary operator has two operands,
x = x - 1
a unary plus would convert operands that are not numbers.
+true	// 1
+""	// 0
+ concatenates strings and non-strings with strings. // 4 + 5 + "px" = "9px"


Assignment operators:

=, +=, -=, *=, /=, %=

e. g. x /= y is the same as x = x / y;
var x, y; x = 5; y = 6;
Strings + numbers: The result of adding "5" + 2 + 3 is 523
Numbers + strings: The result of adding 2 + 3 + "5" is 55


Comparison Operators:

==, ===, !=, !==, >, <, >=, <=, ?		// The result of comparisons is a boolean (true or false).

For comparisons of Strings the lexicographical order of Unicode is used.
"Glow" > "Glee"	// true
'Bee' > 'Be'	// true
Lowercase characters have a greater index in the internal encoding table.
"a" > "A"	// true
Operands of different types are converted to a number by the equality operator ==.
"01" == 1	// true
1 > false	// true
A strict equality operator === checks the equality without type conversion.
"01" === 1		// false
null !== undefined	// true
null != undefined	// false
Comparison and equality check of null and undefined with 0 are edge cases:	// http://javascript.info/comparison
Comparisons (>=) convert null to a number. Equality checks (==) do not...
Comparisons convert unfedined to NaN.
Equality check: undefined would equal null, but not 0


Logical Operators

&& (logical and), || (logical or), ! (logical not)


Type Operators:

typeof, instanceof

typeof can also be used as a function style!

As an operator: typeof x;
As a function: typeof(x);


Bitwise Operators:
..........

//////////////////////////////


Expressions

An expression is a combination of values, variables and operators, which computes to a value.

5 * 10
y + 1
'String1' + 'String2'

//////////////////////////////

Comments

/* several lines */
// single line comment

//////////////////////////////

Identifiers

Identifiers are names. They are used to name variables (and keywords, and functions, and labels).
In JS, the first character must be a letter, or an underscore, or a dollar sign.

//////////////////////////////

Character Set

JS used the Unicode character set.